---
// /src/pages/blog/[...page].astro
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import ArticleCardClassic from "../../components/blog/astro/ArticleCardClassic.astro";
import Pagination from "../../components/blog/astro/Pagination.astro";
import { ARTICLES_PER_PAGE } from "../../constants.ts";
import BlogLayout from "../../layouts/BlogLayout.astro";
import SearchForm from "../../components/blog/react/SearchForm.jsx";

export async function getStaticPaths() {
  
// Récupérer les deux collections séparément
  const allBlogArticles: CollectionEntry<'blog'>[] = (await getCollection('blog'));
  const sortedArticles = allBlogArticles.sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  );
  
  const generatePages = (articles: any[], pathPrefix: string = '') => {
    const totalPages = Math.ceil(articles.length / ARTICLES_PER_PAGE);
    
    return Array.from({ length: totalPages }, (_, i) => ({
      params: { page: i === 0 ? undefined : String(i + 1) },
      props: { 
        currentPage: i + 1, 
        totalPages,
        allArticles: sortedArticles,
        currentFilter: pathPrefix ? pathPrefix.replace('/', '') : 'all' as 'all' | 'articles' | 'plantes'
      }
    }));
  }
  return generatePages(sortedArticles);
}

// const { currentPage, totalPages, allContent, allBlogArticles, allPlantProfiles, currentFilter } = Astro.props;

const { currentPage, totalPages, allArticles } = Astro.props;

const category = Astro.props.currentFilter || 'all';

const allFilteredArticles = allArticles.filter(article => article.data.category === 'article');
const allPlantArticles = allArticles.filter(article => article.data.category === 'plante');

// const url = new URL(Astro.request.url);
// const category = url.searchParams.get('filter') || 'all';

console.log('Current filter:', category); // Debug: vérifier la valeur du filtre

// Déterminer quels articles afficher selon le filtre
const getFilteredArticles = () => {
  // switch(currentFilter) {
  switch(category) {
    case 'article':
      return allArticles.filter(article => article.data.category === 'article');
    case 'plante':
      return allArticles.filter(article => article.data.category === 'plante');
    default:
      return allArticles;
  }
};

const currentArticles = getFilteredArticles();
const articlesForPage = currentArticles.slice((currentPage - 1) * ARTICLES_PER_PAGE, currentPage * ARTICLES_PER_PAGE);

// Calculer la pagination pour le filtre actuel
const filteredTotalPages = Math.ceil(currentArticles.length / ARTICLES_PER_PAGE);

// Pour le hero, on utilise toujours les plantes (plus visuelles)
const heroArticles = allArticles
  .filter(article => article.data.category === 'plante')
  .sort(() => Math.random() - 0.5) // Mélange les articles
  .slice(0, 5); // Prend les 5 premiers articles mélangés
---

<BlogLayout title="Blog" description="Bienvenue sur le blog des plantes bio-indicatrices">
  <!-- Votre contenu existant -->
  {currentPage === 1 && category === 'all' && ( <div class="blog-hero-container">
    {heroArticles.map((article, index) => (
      <article data-index={index} data-status={index === 0 ? "active" : "inactive"}>
        <div class="article-image-section article-section" style={`background: url(${article.data.image.src}) center/cover;`}></div>
        <div class="article-description-section article-section">
          <p>
            {article.data.description || article.body.slice(0, 150) + "..."}
          </p>
          <a href="#all-articles" class="voir-toutes-btn">Voir toutes les plantes</a>
        </div>
        <div class="article-title-section article-section">
          <a href={`/blog/${article.slug}`}>
            <div class="h2-titles">
              <h2 class="h2-visible">{article.data.category === "plante" ? article.data.name?.commonName : article.data.title}</h2>
              <h2 class="h2-invisible">Découvre le</h2>
            </div>
            <img class="plus-shape" src="/plus-shape.svg" alt="" />
          </a>
        </div>
        <div class="article-nav-section article-section">
          <button class="article-nav-button" type="button" onclick="handleLeftClick()">
            <i class="fa-solid fa-arrow-left-long"></i>
          </button>
          <button class="article-nav-button" type="button" onclick="handleRightClick()">
            <i class="fa-solid fa-arrow-right-long"></i>
          </button>
        </div>
      </article>
    ))}
    <div class="hero-indicators">
      {heroArticles.map((_, index) => (
        <div class={`dot ${index === 0 ? 'active' : ''}`} data-slide={index}></div>
      ))}
    </div>
  </div>)}

  <div id="all-articles" class="articles-blog-container">
    <div class="title">
      <h1>
        {category === 'article' ? 'ARTICLES DU BLOG' : 
         category === 'plante' ? 'FICHES PLANTES' : 
         'BIENVENUE SUR LE BLOG'}
      </h1>
    </div>

    <!-- Filtres de navigation -->
    <div class="filter-container">
      <div class="filter-buttons">
        <a href="/blog/" class={`filter-btn ${category === 'all' ? 'active' : ''}`}>
          Tout ({allArticles.length})
        </a>
        <a href="/blog/articles" class={`filter-btn ${category  === 'article' ? 'active' : ''}`}>
          Articles ({allFilteredArticles.length})
        </a>
        <a href="/blog/plantes" class={`filter-btn ${category === 'plantes' ? 'active' : ''}`}>
          Plantes ({allPlantArticles.length})
        </a>
      </div>
    </div>

    <!-- Conteneur de recherche -->
    <div class="search-container">
      <SearchForm client:load articles={allArticles} />
    </div>

    <div class="articles-container">
      {articlesForPage.map((article) => (
        <ArticleCardClassic article={article} />
      ))}
    </div>
    <Pagination 
      currentPage={currentPage} 
      totalPages={totalPages}
      disablePrevious={currentPage === 1} 
      disableNext={currentPage === totalPages}
      baseUrl={'/blog/'} 
    />
  </div>
</BlogLayout>

<script is:inline>

// Gérer la section HERO du blog
const slides = document.querySelectorAll("article");
let currentIndex = 0;
let activeIndex = 0;

function updateArticlesStatus() {
  slides.forEach((element, index) => {
    if (index === currentIndex) {
      element.dataset.status = "active";
    } else {
      element.dataset.status = "inactive";
    }
  });
}

function updateIndicators() {
  document.querySelectorAll('.dot').forEach((dot, index) => {
    dot.classList.toggle('active', index === activeIndex);
  });
}
// Ajoutez les event listeners pour les dots
document.querySelectorAll('.dot').forEach((dot, index) => {
  dot.addEventListener('click', () => {
    goToSlide(index);
  });
});

// Fonction pour aller directement à un slide
function goToSlide(targetIndex) {
  const currentSlide = document.querySelector(`[data-index="${activeIndex}"]`);
  const targetSlide = document.querySelector(`[data-index="${targetIndex}"]`);
  
  if (targetIndex === activeIndex) return;
  
  currentSlide.dataset.status = targetIndex > activeIndex ? "before" : "after";
  targetSlide.dataset.status = targetIndex > activeIndex ? "becoming-active-from-after" : "becoming-active-from-before";
  
  setTimeout(() => {
    targetSlide.dataset.status = "active";
    activeIndex = targetIndex;
    updateIndicators();
  });
}

const handleLeftClick = () => {
  const nextIndex = activeIndex - 1 >= 0 ? activeIndex - 1 : slides.length - 1;

  const currentSlide = document.querySelector(`[data-index="${activeIndex}"]`),
    nextSlide = document.querySelector(`[data-index="${nextIndex}"]`);

  currentSlide.dataset.status = "after";
  nextSlide.dataset.status = "becoming-active-from-before";

  setTimeout(() => {
    nextSlide.dataset.status = "active";
    activeIndex = nextIndex;
  });
  updateIndicators();
};

const handleRightClick = () => {
  const nextIndex = activeIndex + 1 <= slides.length - 1 ? activeIndex + 1 : 0;

  const currentSlide = document.querySelector(`[data-index="${activeIndex}"]`),
    nextSlide = document.querySelector(`[data-index="${nextIndex}"]`);

  currentSlide.dataset.status = "before";
  nextSlide.dataset.status = "becoming-active-from-after";

  setTimeout(() => {
    nextSlide.dataset.status = "active";
    activeIndex = nextIndex;
  });
  updateIndicators();
};

// Cercles sur souris

// Sélectionnez toutes les icônes
const icones = document.querySelectorAll("i");

// Créez un cercle et ajoutez-le au body
const circle = document.createElement("span");
document.body.appendChild(circle);
circle.classList.add("small-circle", "circle");

// Suivez le mouvement de la souris
window.addEventListener("mousemove", (e) => {
  circle.style.left = e.pageX + "px";
  circle.style.top = e.pageY + "px";
});

// Ajoutez des écouteurs d'événements pour chaque icône
icones.forEach((element) => {
  element.addEventListener("mouseover", () => {
    circle.classList.remove("small-circle");
    circle.classList.add("big-circle");
  });
  element.addEventListener("mouseout", () => {
    circle.classList.remove("big-circle");
    circle.classList.add("small-circle");
  });
});

</script>